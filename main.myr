use std
use libc
use stdio
use "sqlite3"

const main = {
	var h0, h1
	var db, rc, errmsg

	/* 
	C wants a '\0' on the end of a string. Myrddin
	does not guarantee this, so put it in explicitly.
	*/
	h0 = "hello world from C\n\0"
	h1 = "hello world from autogenerated C\n\0"

	/* we need some casting to get pointers from slices. */
	libc.write(1, (h0[:h0.len-2] : byte#), h0.len)
	libc.puts((h0 : byte#))
	stdio.puts((h1 : byte#))

	rc = sqlite3.sqlite3_open(("db.sqlite\0" : byte#), &db)
	if rc != 0
		std.fatal("error: {}\n", rc)
	;;
	rc = sqlite3.sqlite3_exec(db, ("SELECT * FROM table;\0" : byte#), (callback : sqlite3.cfunc#), (0 : void#), &errmsg)
	if rc != 0
		std.fatal("error: {} ({})\n", rc, std.cstrconvp(errmsg))
		sqlite3.sqlite3_free((errmsg : void#))
	;;
	sqlite3.sqlite3_close(db)
}

var callback = {a0 : void#, a1 : int, a2 : byte##, a3 : byte##
}

