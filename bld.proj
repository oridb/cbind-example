bin foo =
	main.myr

	# Of course, if you don't want to put
	# it into a library, this works too.
	sqlite3.myr
	sqlite3.glue.c 
	lib libc
	lib stdio
;;

lib libc =
	# Our binding code. The .myr file contains the
	# interface that we expose to the rest of the code.
	# it can be named anything we like, but for clarity
	# it's best to keep the name in sync with the .glue.c
	# file.
	#
	# The <libname>.glue.c file must have the same name
	# as the library we're trying to link in. It instructs
	# mbld to add the appropriate flags to link in
	# lib<libname>.so.
	libc.myr
	libc.glue.c
;;

lib stdio =
	# Autogenerated binding code. Same as above, but
	# written by a machine.
	stdio.myr
	stdio.glue.c
;;


gen stdio.myr std.io.glue.c {dep=stdio.h} =
	cbind -lc -I /usr/include -b stdio stdio.h
;;

# Bug: Currently needs some hand tweaking.
#gen sqlite3.myr sqlite3.glue.c {dep=sqlite3.h} =
#	cbind -lc -lsqlite3 -I /usr/include -I/usr/local/include -D__GNUCLIKE_BUILTIN_STDARG -b sqlite3 sqlite3.h
#;;

